#pragma once

#include <type_traits>

#include <random>

#include <glm/gtc/type_precision.hpp>

#include <glkernel/Kernel.h>


namespace glkernel
{

namespace noise
{


template<typename T, typename std::enable_if<std::is_floating_point<T>::value>::type * = nullptr>
void uniform(tkernel<T> & kernel, T range_min, T range_max);

template <typename T, glm::precision P, template<typename, glm::precision> class V>
void uniform(tkernel<V<T, P>> & kernel, T range_min, T range_max);

template <typename T, glm::precision P, template<typename, glm::precision> class V>
void uniform(tkernel<V<T, P>> & kernel, const V<T, P> & range_min, const V<T, P> & range_max);


template<typename T, typename std::enable_if<std::is_floating_point<T>::value>::type * = nullptr>
void normal(tkernel<T> & kernel, T mean, T stddev);

template <typename T, glm::precision P, template<typename, glm::precision> class V>
void normal(tkernel<V<T, P>> & kernel, T mean, T stddev);

template <typename T, glm::precision P, template<typename, glm::precision> class V>
void normal(tkernel<V<T, P>> & kernel, const V<T, P> & mean, const V<T, P> & stddev);

/**
*  @brief
*  Type used for perlin noise
*/
enum class PerlinNoiseType : unsigned char
{ 
	Standard,
	Cloud,
	CloudAbs,
	Wood,
	Paper
};

/**
*  @brief
*  Computes improved tilable 3D perlin noise
*
*  Uses the random numbers generated by Ken Perlin for the computation
*
*  @param[in,out] kernel
*  The kernel to be modified, size is used for number of samples
*
*  @param[in] type
*  The type of noise to be generated
*
*  @param[in] startFrequency
*  Lowest frewuency noise is generated at
*
*  @param[in,out] octaves
*  Number of frequencies used for noise generation
*/
template<typename T, typename std::enable_if<std::is_floating_point<T>::value>::type * = nullptr>
void perlin(tkernel<T> & kernel
    , const PerlinNoiseType type = PerlinNoiseType::Standard
    , const unsigned int startFrequency = 3
    , const unsigned int octaves = 5);


} // namespace noise

} // namespace glkernel

#include <glkernel/noise.hpp>
