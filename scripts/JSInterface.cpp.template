
#include "JSInterface.h"

#include "KernelObject.h"

#include <iostream>

{includes}

#include <cppexpose/variant/Variant.h>
#include <cppexpose/scripting/ScriptContext.h>

namespace {{

bool canBeFloat(const cppexpose::Variant & v) {{
    return v.canConvert<float>();
}}

bool canBeVec2(const cppexpose::Variant & v) {{
    const auto arr = v.asArray();

    if (!arr)
        return false;

    if (arr->size() < 2)
        return false;

    return canBeFloat(arr->at(0)) && canBeFloat(arr->at(1));
}}

bool canBeVec3(const cppexpose::Variant & v) {{
    const auto arr = v.asArray();

    if (!arr)
        return false;

    if (arr->size() < 3)
        return false;

    return canBeFloat(arr->at(0)) && canBeFloat(arr->at(1)) && canBeFloat(arr->at(2));
}}

bool canBeVec4(const cppexpose::Variant & v) {{
    const auto arr = v.asArray();

    if (!arr)
        return false;

    if (arr->size() < 4)
        return false;

    return canBeFloat(arr->at(0)) && canBeFloat(arr->at(1)) && canBeFloat(arr->at(2)) && canBeFloat(arr->at(3));
}}

float variantToFloat(const cppexpose::Variant & v)
{{
    return v.value<float>();
}}

glm::vec2 variantToVec2(const cppexpose::Variant & v)
{{
    const auto arr = v.asArray();

    const auto x = variantToFloat(arr->at(0));
    const auto y = variantToFloat(arr->at(1));

    return glm::vec2(x,y);
}}

glm::vec3 variantToVec3(const cppexpose::Variant & v)
{{
    const auto arr = v.asArray();

    const auto x = variantToFloat(arr->at(0));
    const auto y = variantToFloat(arr->at(1));
    const auto z = variantToFloat(arr->at(2));

    return glm::vec3(x,y,z);
}}

glm::vec4 variantToVec4(const cppexpose::Variant & v)
{{
    const auto arr = v.asArray();

    const auto x = variantToFloat(arr->at(0));
    const auto y = variantToFloat(arr->at(1));
    const auto z = variantToFloat(arr->at(2));
    const auto w = variantToFloat(arr->at(3));

    return glm::vec4(x,y,z,w);
}}

}} // namespace


JSInterface::JSInterface()
: Object("_glkernel")
{{
    addFunction("createKernel1", this, &JSInterface::createKernel1);
    addFunction("createKernel2", this, &JSInterface::createKernel2);
    addFunction("createKernel3", this, &JSInterface::createKernel3);
    addFunction("createKernel4", this, &JSInterface::createKernel4);

{addFunctionCalls}
}}

cppexpose::Object* JSInterface::createKernel1(int width, int height, int depth)
{{
    return new Kernel1Object(width, height, depth);
}}

cppexpose::Object* JSInterface::createKernel2(int width, int height, int depth)
{{
    return new Kernel2Object(width, height, depth);
}}

cppexpose::Object* JSInterface::createKernel3(int width, int height, int depth)
{{
    return new Kernel3Object(width, height, depth);
}}

cppexpose::Object* JSInterface::createKernel4(int width, int height, int depth)
{{
    return new Kernel4Object(width, height, depth);
}}

{generatedFunctions}
